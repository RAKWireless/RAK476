#include "rw_app.h"

#define PRI_IP "%u.%u.%u.%u"
#define PRI_IP_FORMAT(addr) (uint8_t)(addr>>24), (uint8_t)(addr>>16), (uint8_t)(addr>>8), (uint8_t)(addr)
#define DEST_IP			0xc0a8017a
#define FD_INVALID		-1

void print_conn_event(uint8_t rsp_code, uint8_t socket_fd);

uint8_t temp_buf[MAX_SOCKET_DATA_LEN];
static uint32_t   data_total[12] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

APP_CTX app_ctx;

void init_param()
{
    int i;

    driver_ctx.conn_event = print_conn_event;

    app_ctx.ltcps = FD_INVALID;
    for(i=0; i<MAX_TCP_CLIENTS; i++) {
        app_ctx.ltcps_cli[i] = FD_INVALID;
    }
    app_ctx.tcpc = FD_INVALID;
    app_ctx.ludps = FD_INVALID;
    app_ctx.udpc = FD_INVALID;
}
//
void print_conn_event(uint8_t rsp_code, uint8_t block, uint8_t socket_fd)
{
    int i;
    switch(rsp_code) {
    case 0x80:
        DPRINTF(LOG_INFO, "sock %d conn", socket_fd);
        for(i=0; i<MAX_TCP_CLIENTS; i++) {
            if(app_ctx.ltcps_cli[i] == 0) {
                app_ctx.ltcps_cli[i] = socket_fd;
                app_ctx.ltcps_cli[i] = 1;
                app_ctx.tcpc_num++;
                break;
            }
        }
        if(i == MAX_TCP_CLIENTS) {
            DPRINTF(LOG_INFO, "too much client")
        }
        break;
    case 0x81:
        DPRINTF(LOG_INFO, "sock %d dis", socket_fd);
						if(!block) {
        if(app_ctx.tcpc == 1 && socket_fd == app_ctx.tcpc.fd) {		//tcp client收到断开事件
            app_ctx.tcpc = 0;
        }
        for(i=0; i<MAX_TCP_CLIENTS; i++) {			//tcp server收到client断开事件
            if(app_ctx.ltcps_cli[i].valid == 1 && app_ctx.ltcps_cli[i].fd == socket_fd) {
                app_ctx.ltcps_cli[i].valid = 0;
                app_ctx.tcpc_num--;
                break;
            }
        }
			}
        break;
    case 0x82:
        DPRINTF(LOG_INFO, "net conn");
        app_ctx.net_status = 1;
        break;
    case 0x83:
        DPRINTF(LOG_INFO, "net dis");
        app_ctx.net_status = 0;
        break;
    default:
        break;
    }
}

////////////////////////////////////////////

void RAK_TcpClient_EventHandle()
{
    int temp_fd = -1;
    int ret;
    static int send_count = 100000;
		uint32_t ip;
		uint16_t port;
	
    if(app_ctx.tcpc == 0 && !IS_SEND_BLOCK_SOCK(app_ctx.tcpc.fd) && !IS_DATA_VALID_SOCK(app_ctx.tcpc.fd)) {
        temp_fd = open_socket(0, 0, DEST_IP, 443, 0, 1);
//			  temp_fd = open_socket(0, 0, DEST_IP, 8000, 0, 0);
        if(temp_fd >= 0) {
            DPRINTF(LOG_INFO, "fd %d ok", temp_fd);
            app_ctx.tcpc.fd = temp_fd;
            app_ctx.tcpc = 1;
            data_total[temp_fd] = 0;
        } else if(temp_fd < 0) {
            if(temp_fd == CMD_PEND) {
//								DPRINTF(LOG_INFO, "cmd pend");
            } else {
                DPRINTF(LOG_INFO, "open sock error %d", temp_fd);
            }
        }
    } else {
        ret = read_socket(&app_ctx.tcpc, temp_buf, MAX_SOCKET_DATA_LEN, &ip, &port);
        if(ret > 0) {
            data_total[app_ctx.tcpc.fd] += ret;
            DPRINTF(LOG_INFO, "fd%u %u %u " PRI_IP ":%u", app_ctx.tcpc.fd, ret, data_total[app_ctx.tcpc.fd], PRI_IP_FORMAT(ip), port);
        } else if(ret == 0) {
            DPRINTF(LOG_INFO, "fd %d read 0", app_ctx.tcpc.fd);
        }
#if defined MODE_QUERY
        else if(ret < 0) {
            if(ret == CMD_PEND) {
//								DPRINTF(LOG_INFO, "cmd pend");
            } else if(ret == CMD_TIMEOUT) {
                DPRINTF(LOG_ERROR, "cmd timeout");
            } else {
                DPRINTF(LOG_INFO, "read sock error %d", ret);
            }
        }
#endif
        if(send_count > 0) {
            ret = write_socket(&app_ctx.tcpc, 0, 0, 1000, temp_buf);
            if(ret == CMD_OK) {
                DPRINTF(LOG_INFO, "send ok");
                send_count -= 1000;
            } else if(ret < 0) {
                if(ret == CMD_PEND) {
//								DPRINTF(LOG_INFO, "cmd pend");
                } else if(ret == CMD_SOCK_INVALID) {
                    DPRINTF(LOG_INFO, "fd %d dis", app_ctx.tcpc.fd);
                    app_ctx.tcpc = 0;
                }	else if(ret == CMD_TIMEOUT) {
                    DPRINTF(LOG_ERROR, "cmd timeout");
                } else {
                    DPRINTF(LOG_INFO, "send error %d", ret);
                }
            }
        }
    }
}

void RAK_TcpServer_EventHandle(void)
{
    int temp_fd = -1;
    int ret;
    int i=0,j=0;
		uint32_t ip;
		uint16_t port;
	
    static int send_count[3] = {100000, 100000, 100000};

    if(app_ctx.ltcps == 0) {
        temp_fd = open_socket(1, 1, 0, 0, 25000, 0);
        if(temp_fd >= 0) {
            DPRINTF(LOG_INFO, "fd %d ok", temp_fd);
            app_ctx.ltcps.fd = temp_fd;
            app_ctx.ltcps = 1;
        } else if(temp_fd < 0) {
            if(temp_fd == CMD_PEND) {
//								DPRINTF(LOG_INFO, "cmd pend");
            } else {
                DPRINTF(LOG_INFO, "open sock error %d", temp_fd);
            }
        }
    } else {

#if defined MODE_QUERY
        //读socket状态
        ret = query_socket_status(app_ctx.ltcps.fd);
        if(ret == CMD_OK) {
            int valid_num = 0;
            int i = 0, j=0;
            int cli_fd = -1;
            rak_qrySocketStatusFrame* socket_status_frame;
            socket_status_frame = (rak_qrySocketStatusFrame*)uCmdRspFrame.uCmdRspBuf;

            DPRINTF(LOG_INFO, "valid_num=%d", valid_num);

            for(i=0; i<MAX_TCP_CLIENTS; i++) {
                app_ctx.ltcps_cli[i].valid = 0;
                app_ctx.tcpc_num = 0;
            }
            if(valid_num > 0) {
                for(i=0; i<valid_num; i++) {
                    cli_fd = socket_status_frame->qrySocketStatusFrame.socket_info[i].socketDescriptor;
                    app_ctx.ltcps_cli[i].fd = cli_fd;
                    app_ctx.ltcps_cli[i].valid = 1;
                    app_ctx.tcpc_num++;
                    DPRINTF(LOG_INFO, "recv fd %d", app_ctx.ltcps_cli[i].fd);
                }
            }
        }
#endif
        if(app_ctx.tcpc_num > 0) {
            for(i=0; i<MAX_TCP_CLIENTS; i++) {
                if(app_ctx.ltcps_cli[i].valid == 1 || IS_SEND_BLOCK_SOCK(app_ctx.ltcps_cli[i].fd) || IS_DATA_VALID_SOCK(app_ctx.ltcps_cli[i].fd)) {
                    ret = read_socket(&app_ctx.ltcps_cli[i], temp_buf, MAX_SOCKET_DATA_LEN, &ip, &port);
                    if(ret > 0) {
                        data_total[app_ctx.ltcps_cli[i].fd] += ret;
                        DPRINTF(LOG_INFO, "fd%u %u %u " PRI_IP ":%u", app_ctx.ltcps_cli[i].fd, ret,
                                data_total[app_ctx.ltcps_cli[i].fd], PRI_IP_FORMAT(ip), port);
                    } else if(ret == 0) {
                        DPRINTF(LOG_INFO, "fd %d read 0", app_ctx.ltcps_cli[i].fd);
                    }
#if defined MODE_QUERY
                    else if(ret < 0) {
                        if(ret == CMD_PEND) {
                            //								DPRINTF(LOG_INFO, "cmd pend");
                        } else if(ret == CMD_TIMEOUT) {
                            DPRINTF(LOG_ERROR, "cmd timeout");
                        } else {
                            DPRINTF(LOG_INFO, "read sock error %d", ret);
                        }
                    }
#endif
                    if(send_count[i] > 0) {
                        ret = write_socket(&app_ctx.ltcps_cli[i], 0, 0, 1000, temp_buf);
                        if(ret == CMD_OK) {
                            DPRINTF(LOG_INFO, "send ok");
                            send_count[i] -= 1000;
                        } else if(ret < 0) {
                            if(ret == CMD_PEND) {
                                //								DPRINTF(LOG_INFO, "cmd pend");
                            } else if(ret == CMD_SOCK_INVALID) {
																DPRINTF(LOG_ERROR, "sock %d invalid", app_ctx.ltcps_cli[i].fd);
																app_ctx.ltcps_cli[i].valid = 0;
                            }	else if(ret == CMD_TIMEOUT) {
                                DPRINTF(LOG_ERROR, "cmd timeout");
                            } else {
                                DPRINTF(LOG_INFO, "send error %d", ret);
                            }
                        }
                    } else {
                        data_total[app_ctx.ltcps_cli[i].fd] = 0;
                    }
                }
            }
        }
    }
}


void RAK_UdpClient_EventHandle(void)
{
    int temp_fd = -1;
    int ret;
    static int send_count = 100000;
		uint32_t ip;
		uint16_t port;
	
    if(app_ctx.udpc == 0) {
        temp_fd = open_socket(2, 2, DEST_IP, 9000, 3000, 0);
        if(temp_fd >= 0) {
            DPRINTF(LOG_INFO, "fd %d ok", temp_fd);
            app_ctx.udpc.fd = temp_fd;
            app_ctx.udpc = 1;
            data_total[temp_fd] = 0;
        } else if(temp_fd < 0) {
            if(temp_fd == CMD_PEND) {
//								DPRINTF(LOG_INFO, "cmd pend");
            } else {
                DPRINTF(LOG_INFO, "open sock error %d", temp_fd);
            }
        }
    }
    else {
        ret = read_socket(&app_ctx.udpc, temp_buf, 1000, &ip, &port);
        if(ret > 0) {
            data_total[app_ctx.udpc.fd] += ret;
            DPRINTF(LOG_INFO, "fd%u %u %u " PRI_IP ":%u", app_ctx.udpc.fd, ret, data_total[app_ctx.udpc.fd], PRI_IP_FORMAT(ip), port);
        } else if(ret == 0) {
            DPRINTF(LOG_INFO, "fd %d read 0", app_ctx.udpc.fd);
        }
#if defined MODE_QUERY
        else if(ret < 0) {
            if(ret == CMD_PEND) {
                //								DPRINTF(LOG_INFO, "cmd pend");
            } else if(ret == CMD_TIMEOUT) {
                DPRINTF(LOG_ERROR, "cmd timeout");
            } else {
                DPRINTF(LOG_INFO, "read sock error %d", ret);
            }
        }
#endif
        if(app_ctx.udpc == 1 && send_count > 0) {
            ret = write_socket(&app_ctx.udpc, 0, 0, 1000, temp_buf);
            if(ret == CMD_OK) {
                DPRINTF(LOG_INFO, "send ok");
                send_count -= 1000;
            } else if(ret < 0) {
                if(ret == CMD_PEND) {
                    //								DPRINTF(LOG_INFO, "cmd pend");
                } else if(ret == CMD_SOCK_INVALID) {
										DPRINTF(LOG_ERROR, "sock %d invalid", app_ctx.udpc.fd);
										app_ctx.udpc = 0;
                }	else if(ret == CMD_TIMEOUT) {
                    DPRINTF(LOG_ERROR, "cmd timeout");
                } else {
                    DPRINTF(LOG_INFO, "send error %d", ret);
                }
            }
        }
    }
}

void RAK_UdpServer_EventHandle(void)
{
    int temp_fd = -1;
    int ret;
		static uint32_t ip = 0;
		static uint16_t port = 0;
	  static int send_count = 100000;
	
    if(app_ctx.ludps == 0) {
        temp_fd = open_socket(3, 3, 0, 0, 25001, 0);
        if(temp_fd >= 0) {
            DPRINTF(LOG_INFO, "fd %d ok", temp_fd);
            app_ctx.ludps.fd = temp_fd;
            app_ctx.ludps = 1;
            data_total[temp_fd] = 0;
        } else if(temp_fd < 0) {
            if(temp_fd == CMD_PEND) {
//								DPRINTF(LOG_INFO, "cmd pend");
            } else {
                DPRINTF(LOG_INFO, "open sock error %d", temp_fd);
            }
        }
    }
    else {
        ret = read_socket(&app_ctx.ludps, temp_buf, 1000, &ip, &port);
        if(ret > 0) {
            data_total[app_ctx.ludps.fd] += ret;
            DPRINTF(LOG_INFO, "fd%u %u %u " PRI_IP ":%u", app_ctx.ludps.fd, ret, data_total[app_ctx.ludps.fd], PRI_IP_FORMAT(ip), port);
        } else if(ret == 0) {
            DPRINTF(LOG_INFO, "fd %d read 0", app_ctx.ludps.fd);
        }
#if defined MODE_QUERY
        else if(ret < 0) {
            if(ret == CMD_PEND) {
                //								DPRINTF(LOG_INFO, "cmd pend");
            } else if(ret == CMD_TIMEOUT) {
                DPRINTF(LOG_ERROR, "cmd timeout");
            } else {
                DPRINTF(LOG_INFO, "read sock error %d", ret);
            }
        }
#endif
        if(app_ctx.ludps == 1 && ip != 0 && send_count > 0) {
            ret = write_socket(&app_ctx.ludps, port, ip, 1000, temp_buf);
            if(ret == CMD_OK) {
                DPRINTF(LOG_INFO, "send ok");
                send_count -= 1000;
            } else if(ret < 0) {
                if(ret == CMD_PEND) {
                    //								DPRINTF(LOG_INFO, "cmd pend");
                } else if(ret == CMD_SOCK_INVALID) {
										DPRINTF(LOG_ERROR, "sock %d invalid", app_ctx.ludps.fd);
										app_ctx.ludps = 0;
                }	else if(ret == CMD_TIMEOUT) {
                    DPRINTF(LOG_ERROR, "cmd timeout");
                } else {
                    DPRINTF(LOG_INFO, "send error %d", ret);
                }
            }
        }
    }
}
